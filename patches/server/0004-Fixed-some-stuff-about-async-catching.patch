From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrHua269 <novau233@163.com>
Date: Mon, 1 Jan 2024 10:09:29 +0000
Subject: [PATCH] Fixed some stuff about async catching


diff --git a/src/main/java/io/papermc/paper/threadedregions/RegionizedWorldData.java b/src/main/java/io/papermc/paper/threadedregions/RegionizedWorldData.java
index 9c0339f27b17926f67a48b3f3485bbb5bf8c3b00..ba589f86ff4eb975333151d5717d32205cd21908 100644
--- a/src/main/java/io/papermc/paper/threadedregions/RegionizedWorldData.java
+++ b/src/main/java/io/papermc/paper/threadedregions/RegionizedWorldData.java
@@ -622,9 +622,6 @@ public final class RegionizedWorldData {
     }
 
     public void addEntityTickingEntity(final Entity entity) {
-        if (!TickThread.isTickThreadFor(entity)) {
-            throw new IllegalArgumentException("Entity " + entity + " is not under this region's control");
-        }
         this.entityTickList.add(entity);
         TickRegions.RegionStats.updateCurrentRegion(entity);
     }
@@ -634,9 +631,6 @@ public final class RegionizedWorldData {
     }
 
     public void removeEntityTickingEntity(final Entity entity) {
-        if (!TickThread.isTickThreadFor(entity)) {
-            throw new IllegalArgumentException("Entity " + entity + " is not under this region's control");
-        }
         this.entityTickList.remove(entity);
         TickRegions.RegionStats.updateCurrentRegion(entity);
     }
@@ -653,9 +647,6 @@ public final class RegionizedWorldData {
     }
 
     public void addEntity(final Entity entity) {
-        if (!TickThread.isTickThreadFor(this.world, entity.chunkPosition())) {
-            throw new IllegalArgumentException("Entity " + entity + " is not under this region's control");
-        }
         if (this.allEntities.add(entity)) {
             if (entity instanceof ServerPlayer player) {
                 this.localPlayers.add(player);
@@ -670,9 +661,6 @@ public final class RegionizedWorldData {
     }
 
     public void removeEntity(final Entity entity) {
-        if (!TickThread.isTickThreadFor(entity)) {
-            throw new IllegalArgumentException("Entity " + entity + " is not under this region's control");
-        }
         if (this.allEntities.remove(entity)) {
             if (entity instanceof ServerPlayer player) {
                 this.localPlayers.remove(player);
@@ -683,16 +671,10 @@ public final class RegionizedWorldData {
     }
 
     public void addNavigatingMob(final Mob mob) {
-        if (!TickThread.isTickThreadFor(mob)) {
-            throw new IllegalArgumentException("Entity " + mob + " is not under this region's control");
-        }
         this.navigatingMobs.add(mob);
     }
 
     public void removeNavigatingMob(final Mob mob) {
-        if (!TickThread.isTickThreadFor(mob)) {
-            throw new IllegalArgumentException("Entity " + mob + " is not under this region's control");
-        }
         this.navigatingMobs.remove(mob);
     }
 
diff --git a/src/main/java/me/earthme/lightingluminol/pool/WorldDataPool.java b/src/main/java/me/earthme/lightingluminol/pool/WorldDataPool.java
index dcf6e58dfe8eb4b21821025fdeeaec037e08ea2a..d7ef1ad984f63e2b5545a8df081015bbf7cc144f 100644
--- a/src/main/java/me/earthme/lightingluminol/pool/WorldDataPool.java
+++ b/src/main/java/me/earthme/lightingluminol/pool/WorldDataPool.java
@@ -17,7 +17,7 @@ public class WorldDataPool {
     @Nullable
     public RegionizedWorldData getDataAnyThread(@NotNull Entity ent){
         final RegionizedWorldData got = ent.level().getCurrentWorldDataUnsafe();
-        return got == null ? getDataOffTickThread(ent.sectionX,ent.sectionZ, (ServerLevel) ent.level()) : got; //Skip it if we got the current world data
+        return got == null ? getDataOffTickThread((int)ent.position.x >> 4,(int)ent.position.z >> 4, (ServerLevel) ent.level()) : got; //Skip it if we got the current world data
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index 10b34bfc8ed934dbd53b40b4527a3c758138c98d..09e72d4dfd586372d8b2e2474168f89572a3d129 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -1057,7 +1057,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
 
                     entity.tracker = playerchunkmap_entitytracker; // Paper - Fast access to tracker
                     // Folia - region threading
-                    playerchunkmap_entitytracker.updatePlayers(this.level.getLocalPlayers()); // Folia - region threading
+                    playerchunkmap_entitytracker.updatePlayers(Level.WORLD_DATA_POOL.getDataAnyThread(entity).getLocalPlayers()); // Folia - region threading
                     if (entity instanceof ServerPlayer) {
                         ServerPlayer entityplayer = (ServerPlayer) entity;
 
diff --git a/src/main/java/net/minecraft/server/level/ServerChunkCache.java b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
index f1c7dd5d24d2332c1fa29f9c96fd3a3640830493..3fe987770b6618c3084dcc660f540ff30e0c963f 100644
--- a/src/main/java/net/minecraft/server/level/ServerChunkCache.java
+++ b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
@@ -12,6 +12,7 @@ import java.util.List;
 import java.util.Objects;
 
 import io.papermc.paper.threadedregions.RegionizedServer;
+import io.papermc.paper.util.TickThread;
 import me.earthme.lightingluminol.SchedulerUtil;
 
 import java.util.concurrent.CompletableFuture;
@@ -248,7 +249,7 @@ public class ServerChunkCache extends ChunkSource {
                 // Paper end
                 com.destroystokyo.paper.io.SyncLoadFinder.logSyncLoad(this.level, x1, z1); // Paper - sync load info
                 this.level.timings.syncChunkLoad.startTiming(); // Paper
-                if (!RegionizedServer.isGlobalTickThread()){
+                if (!RegionizedServer.isGlobalTickThread() || !TickThread.isTickThreadFor(this.level,x,z)){
                     chunkproviderserver_b.managedBlock(completablefuture::isDone);
                 }else{
                     completablefuture.join();
